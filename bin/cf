#! /usr/bin/env python3

import argparse
import os
import subprocess
import sys
from colored import fg

def separator(color):
    print(color + "-----------------------------------")

CXX = "g++"
CXX_FLAGS = "-std=c++17 -O2 -g -Wall -Wextra -pedantic -Wshadow -Wformat=2 -Wfloat-equal -Wconversion -Wlogical-op -Wshift-overflow=2 -Wduplicated-cond -Wcast-qual -Wcast-align -Wno-unused-result -Wno-sign-conversion -D_GLIBCXX_DEBUG" 
DEBUG_FLAGS = "-D_GLIBCXX_DEBUG_PEDANTIC -fsanitize=address -fsanitize=undefined -fno-sanitize-recover=all -fstack-protector -D_FORTIFY_SOURCE=2"
LOCAL_FLAGS = "-DLOCAL"

# Parse problem name as cli parameters
parser = argparse.ArgumentParser(
    description='Compiler and runner script for Competitive Programming')
parser.add_argument('action', type=str,
                    help='Wheter we want to run or test against .in and .ans files')
parser.add_argument('problem', type=str,
                    help='A required integer positional argument')
parser.add_argument('-f', type=str, default=None, help='Name of file to run')
parser.add_argument('--debug', action='store_true',
                    help='Indicates if we want to compile with DEBUG_FLAGS')
parser.add_argument('--py', action='store_true',
                    help='Indicates if a python file is used')
args = parser.parse_args()

args.problem = args.problem.split(".")[0]

def compile():
    compile_command = " ".join([CXX, CXX_FLAGS, LOCAL_FLAGS])
    compile_command += (" " + DEBUG_FLAGS if args.debug else "") + \
                        f" -o {args.problem} {args.problem}.cpp"
    print(cyan_color + compile_command)

    process = subprocess.Popen(compile_command, shell=True)
    process.communicate()
    return process.returncode == 0


def run(file_name= None, test_name=None):
    print(yellow_color + f" 省 Running {test_name if test_name else args.problem}")
    test_to_run = f" < {test_name}.in > {test_name}.res" if test_name is not None else ""
    file_to_run = f" < {file_name}"
    run_command = f"ulimit -s 1262144 && time -f '  real\t%es\n  user\t%Us\n  sys\t%Ss\n  mem\t%MKB' ./{args.problem}"
    run_command += (file_to_run if file_name else test_to_run)
    print(f"time ./{args.problem + (file_to_run if file_name else test_to_run)}")

    process = subprocess.Popen(run_command, shell=True)
    process.communicate()
    return process.returncode == 0

def run_py(file_name=None, test_name=None):
    print(yellow_color + f" 省 Running {test_name if test_name else args.problem}")
    test_to_run = f" < {test_name}.in > {test_name}.res" if test_name is not None else ""
    file_to_run = f" < {file_name}"
    run_command = f"time -f '  real\t%es\n  user\t%Us\n  sys\t%Ss\n  mem\t%MKB' python3 {args.problem}.py {file_to_run if file_name else test_to_run}"
    print(f"time python3 {args.problem}.py {file_to_run if file_name else test_to_run}")

    process = subprocess.Popen(run_command, shell=True)
    process.communicate()
    return process.returncode == 0


def test():
    all_tests_passed = True
    folder_files = [f for f in os.listdir('.') if os.path.isfile(f)]
    if not folder_files:
        print(yellow_color + "Tests not found!!")
    folder_files.sort()

    for f in folder_files:
		# test input for this file
        if f[-3:] != '.in' or f[:len(args.problem)] != args.problem:
            continue
        test_name = f[:-3]
        if(test_name + '.ans' in folder_files):
            run(test_name = test_name) if not args.py else run_py(test_name, test_name) # Run this test
            process = subprocess.Popen(f"colordiff -ys {test_name}.res {test_name}.ans", shell=True , stdout=subprocess.PIPE)
            process.communicate()
            if process.returncode != 0:
                print(red_color + f" Test {test_name} failed")

                print(yellow_color + "Actual output: ")
                with open(f'{test_name}.res', 'r') as test_res:
                    print(cyan_color + test_res.read().strip())
                print(yellow_color + "Expected output: ")
                with open(f'{test_name}.ans', 'r') as test_out:
                    print(cyan_color + test_out.read())

                all_tests_passed = False
            else:
                print(green_color + f" Test {test_name} passed")
        else:
            print(yellow_color + f" Output not found for {f}")
        separator(yellow_color)

    return all_tests_passed # Corrio todos los test satisfactioriamente

red_color = fg('red')
yellow_color = fg('yellow')
green_color = fg('green')
cyan_color = fg('cyan')

try:
    print(cyan_color + "CF Runner julianferres")
    if args.action == 'run':
        if args.py:
            run_py(args.f)
        elif(not compile() or not run(args.f)):
            print(red_color + "Error de compilacion")
    elif args.action == 'compile':
        compiled_successfully = compile()
        if(not compiled_successfully):
            print(red_color + "Error de compilacion")
    elif args.action == 'exec':
        run() if not args.py else run_py()
    elif args.action == 'test':
        if args.py:
            test()
            sys.exit(0)
        compiled_successfully = compile()
        if not compiled_successfully:
            print(red_color + "Error de compilacion")
        else:
            passed_tests = test()
            if passed_tests:
                print(green_color + "--- All tests passed ---")
            else:
                print(red_color + "--- Some test failed ---")
    else:
        print(red_color + "Acción no encontrada")

except KeyboardInterrupt:
    print(yellow_color + "Se interrumpio la ejecucion")
    sys.exit()

